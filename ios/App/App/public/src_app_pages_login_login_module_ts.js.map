{"version":3,"file":"src_app_pages_login_login_module_ts.js","mappings":"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","sources":["./src/app/pages/login/login-routing.module.ts","./src/app/pages/login/login.module.ts","./src/app/pages/login/login.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ToastController, AlertController } from '@ionic/angular';\r\nimport { AutenthicationService } from 'src/app/services/autenthication.service';\r\nimport { DbService } from 'src/app/services/db.service';\r\nimport { Storage } from '@ionic/storage';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage implements OnInit {\r\n\r\n  login: any={\r\n    Usuario: '',\r\n    Password:''\r\n  }\r\n  field:string=\"\";\r\n\r\n  constructor(public toastController: ToastController,\r\n    private dbservice: DbService, \r\n    private alertcontroler: AlertController,\r\n    private router: Router,\r\n    private storage: Storage,\r\n    public authenticationSerive:AutenthicationService)\r\n  \r\n  {\r\n    console.log('pagina Login iniciada')\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ingresar(){\r\n    // Se valida que el usuario ingreso todos los datos\r\n    if(this.validateModel(this.login)){\r\n      // Se obtiene si existe alguna data de sesión\r\n      this.authenticationSerive.login(this.login);\r\n    \r\n      \r\n    }\r\n    else{\r\n      this.presentToast(\"Porfavor, ingresa tu \"+this.field);\r\n    }\r\n  }\r\n  registrar(){\r\n    this.createSesionData(this.login);\r\n  }\r\n  /**\r\n   * Función que genera (registra) una nueva sesión\r\n   * @param login \r\n   */\r\n  createSesionData(login: any) {\r\n    if(this.validateModel(login)){ // Se valida que se ingresen todos los datos\r\n      /**\r\n       * Se hace una copia del login, se hace así ya que\r\n       * el operador '=' no haceuna copia de los datos, si no\r\n       * que crea una nueva referencia a los mismos datos.\r\n       * Por eso se utiliza el Object.assign\r\n       */\r\n      let copy = Object.assign({},login);\r\n      copy.Active=1; // Se agrega el valor active = 1 a la copia\r\n      this.dbservice.createSesionData(copy) // la copia se le apsa a la función para crear la sesion\r\n      .then((data)=>{ // si la sentencia se ejecuto correctamente\r\n        this.presentToast(\"Bienvenido\"); // Se muestra el mensaje de bienvenido\r\n        this.storage.set(\"USER_DATA\",data);  // Se setea el USER_DATA en el storage\r\n        this.router.navigate(['home']); // Se navega hasta el home\r\n      })\r\n      .catch((error)=>{\r\n        this.presentToast(\"El usuario ya existe\");\r\n      })\r\n    }\r\n    else{\r\n      this.presentToast(\"Falta: \"+this.field);\r\n    }\r\n  }\r\n  /**\r\n   * validateModel sirve para validar que se ingrese algo en los\r\n   * campos del html mediante su modelo\r\n   */\r\n  validateModel(model:any){\r\n    // Recorro todas las entradas que me entrega Object entries y obtengo su clave, valor\r\n    for (var [key, value] of Object.entries(model)) {\r\n      // Si un valor es \"\" se retornara false y se avisara de lo faltante\r\n      if (value==\"\") {\r\n        // Se asigna el campo faltante\r\n        this.field=key;\r\n        // Se retorna false\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * Muestra un toast al usuario\r\n   * @param message Mensaje a presentar al usuario\r\n   * @param duration Duración el toast, este es opcional\r\n   */\r\n  async presentToast(message:string, duration?:number){\r\n    const toast = await this.toastController.create(\r\n      {\r\n        message:message,\r\n        duration:duration?duration:2000\r\n      }\r\n    );\r\n    toast.present();\r\n  }\r\n  /**\r\n   * Función parte del ciclo de vida de un componente\r\n   */\r\n  ionViewWillEnter(){\r\n    console.log('ionViewDidEnter');\r\n      // Se valida que exista una sesión activa\r\n      this.dbservice.sesionActive()\r\n      .then((data)=>{\r\n        if(data!=undefined){\r\n          this.storage.set(\"USER_DATA\",data); \r\n          this.router.navigate(['home']);\r\n        }\r\n      })\r\n      .catch((error)=>{\r\n        console.error(error);\r\n        this.router.navigate(['login']);\r\n      })\r\n  }\r\n\r\n\r\n  async formulario() {\r\n    const alert = await this.alertcontroler.create({\r\n      header: 'Creación de Usuario',\r\n      message: '<strong>El usuario no existe, desea registrarse?</strong>',\r\n      buttons: [\r\n        {\r\n          text: 'NO',\r\n          role: 'cancel'\r\n        }, {\r\n          text: 'SI',\r\n          handler: () => {\r\n            this.createSesionData(this.login)\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}